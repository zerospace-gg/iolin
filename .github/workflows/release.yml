name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  check-version:
    name: Check Version and Release
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version-check.outputs.should-release }}
      next-version: ${{ steps.version-check.outputs.next-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pkl
        uses: pkl-community/setup-pkl@v0
        with:
          pkl-version: "0.26.3"

      - name: Check and bump version
        id: version-check
        run: |
          # Get current version from PklProject
          CURRENT_VERSION=$(pkl eval PklProject -x package.version | tr -d '"')
          echo "Current version in PklProject: $CURRENT_VERSION"

          # Extract major.minor from current version
          MAJOR_MINOR=$(echo $CURRENT_VERSION | cut -d. -f1-2)
          echo "Major.Minor: $MAJOR_MINOR"

          # Get latest release tag
          LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || echo "")
          echo "Latest release: $LATEST_RELEASE"

          # Determine next version
          if [ -z "$LATEST_RELEASE" ]; then
            # No previous releases, use current version
            NEXT_VERSION="$CURRENT_VERSION"
            echo "No previous releases found, using current version"
          else
            # Check if latest release matches our major.minor
            RELEASE_MAJOR_MINOR=$(echo $LATEST_RELEASE | cut -d. -f1-2)
            if [ "$MAJOR_MINOR" = "$RELEASE_MAJOR_MINOR" ]; then
              # Same major.minor, bump patch
              PATCH=$(echo $LATEST_RELEASE | cut -d. -f3)
              NEXT_PATCH=$((PATCH + 1))
              NEXT_VERSION="${MAJOR_MINOR}.${NEXT_PATCH}"
              echo "Bumping patch version: $LATEST_RELEASE -> $NEXT_VERSION"
            else
              # Different major.minor, use current version (manual bump)
              NEXT_VERSION="$CURRENT_VERSION"
              echo "Major.minor changed, using current version: $NEXT_VERSION"
            fi
          fi

          echo "next-version=$NEXT_VERSION" >> $GITHUB_OUTPUT

          # Check if we need to create a release
          if [ "$NEXT_VERSION" != "$LATEST_RELEASE" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "Version will be released: $NEXT_VERSION"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "No version change needed"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: check-version
    if: ${{ needs.check-version.outputs.should-release == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pkl
        uses: pkl-community/setup-pkl@v0
        with:
          pkl-version: "0.26.3"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm

      - name: Install just
        uses: extractions/setup-just@v1

      - name: Install dependencies
        run: npm ci

      - name: Show version info
        run: |
          VERSION=${{ needs.check-version.outputs.next-version }}
          CURRENT_VERSION=$(pkl eval PklProject -x package.version | tr -d '"')

          echo "PklProject version: $CURRENT_VERSION"
          echo "Release version: $VERSION"
          echo "Note: Using git tag for Pkl package versioning"

      - name: Run full CI process
        run: just all

      - name: Run build tests
        run: just test-build

      - name: Verify build integrity
        run: just verify

      - name: Show build statistics
        run: just stats

      - name: Prepare release artifacts
        run: |
          VERSION=${{ needs.check-version.outputs.next-version }}

          # Create release directory
          mkdir -p release-artifacts

          # Package Pkl files (excluding tooling directory)
          zip -r "release-artifacts/iolin-${VERSION}.zip" . \
            -x "tooling/*" \
            -x "node_modules/*" \
            -x ".git/*" \
            -x "temp/*" \
            -x "tmp/*" \
            -x "tmp_talent_backup/*" \
            -x ".out/*" \
            -x ".idea/*" \
            -x ".env*"

          # Create JSON data bundle
          cd dist/json
          zip -r "../../release-artifacts/json-data-${VERSION}.zip" . \
            -x "*.d.ts"
          cd ../..

          # Copy NPM package
          if [ -d "dist/npm" ] && [ "$(ls -A dist/npm)" ]; then
            cp -r dist/npm "release-artifacts/npm-package"
          else
            echo "NPM package not found or empty"
          fi

          ls -la release-artifacts/

      - name: Setup npm registry authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        run: |
          cd dist/npm
          echo "ðŸš€ Publishing @zerospacegg/iolin to npm"
          echo "Package: @zerospacegg/iolin"
          echo "Version: ${{ needs.check-version.outputs.next-version }}"
          echo "Registry: https://registry.npmjs.org"
          npm publish --access public
          echo "âœ… Successfully published to npm!"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.next-version }}
          name: Release ${{ needs.check-version.outputs.next-version }}
          body: |
            ## Release ${{ needs.check-version.outputs.next-version }}

            ### What's included:
            - ðŸ“¦ Pkl package (`iolin-${{ needs.check-version.outputs.next-version }}.zip`)
            - ðŸ“Š JSON data bundle (`json-data-${{ needs.check-version.outputs.next-version }}.zip`)
            - ðŸ“š NPM package published as `@zerospacegg/iolin@${{ needs.check-version.outputs.next-version }}`
          files: release-artifacts/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "âœ… Release ${{ needs.check-version.outputs.next-version }} created successfully!"
          echo "ðŸ“¦ Artifacts included:"
          echo "  - iolin-${{ needs.check-version.outputs.next-version }}.zip (Pkl package)"
          echo "  - json-data-${{ needs.check-version.outputs.next-version }}.zip (JSON data bundle)"
          echo "  - @zerospacegg/iolin@${{ needs.check-version.outputs.next-version }} (published to npm)"
